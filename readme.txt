code repository for this tutorials
https://links.mead.io/nodecourse
https://github.com/andrewjmead/node-course-v3-code

The complete node JS free youtube tutorial by maximilian
https://academind.com/tutorials/building-a-restful-api-with-nodejs/


why Node JS
-----------
V8 JS engine
    it is build on top of chrome browser using c++
    JS front ->gets converted into C++ binding
    Node JS-> gets converted into some c++ binding function

    In browser developer console is provided to execute individual JS script or code.
    I can get window object in JS browser.
    window is specially provided by the chrome V8 for JS at Runtime. which will provide access to various properties and methods.
    in browser we have 'document' object which allow us to work with DOM


    all the js core function are provided in Node also, its because of V8 engine.
    But if try to access it in node terminal we will get undefined error.
    node terminal->RDBL->Read Eval and Print
    lly in Node we have 'global' object to give access to various methods and properties.
    here we have 'process'->have various properties and methods to manipulate the process.

    Node JS is a JS on server this is possible because Node JS uses V8 engine to run over the JS code you provide.
    Node JS is able to teach new thing to JS by providing C++ binding to V8 this allow JS to understand C++ and to do the required task.

Install Node JS
----------------
    node.org
    cltr+l for node console clear or console.clear()
    cmd->node -v
    download IDE visual studio code editor.
    atom(free), sublime(paid)

Why Node js
-----------
    Node JS is a JS runtime built on Chrome's V8 JS engine.
    It uses an event-driven, non blocking I/O[reading file, db data reading] model that makes it light weight and efficient.
    Its a package eco system like npm(wwww.npmjs.com) which is largest open system package.

First program
-------------
    create hello.js
    console.log('Welcome to NOde JS');
    run->node hello/js
    documentation->nodejs.org>docs>12

Node JS module system
*********************
    3 ways of loading node module systems
    core node modules->module which are included with our node installations.
    third party modules->importing modules developes by other developers.
    own modules->module created by ourselves.

    importing core node modules
    ---------------------------
    using 'require'
        const fs = require('fs');
            fs.writeFileSync('notes.txt', 'This file was created by Node.js');
        fs.appendFileSync('notes.txt', '. This is appended by imam.');
    run>node app.js

    importing our own files
    -----------------------
    create new file utils.js
        console.log('utils.js');
    require it in app.js
        require('./utils.js');
        const name="imam";
        console.log(name);
    >node app.js
        o/p imam utils.js

    all the module which we are refering have there own scope with there own variables. we cant acce the variable of other scope just require(import) it. So we need to export explicitly that module to share with outside world.
        module.exports
    utils.js
        console.log('utils.js');
        const name='imam';
        module.exports = name;
    app.js
        const name = require('./utils.js');
        console.log(name);
    
    importing npm modules
    ---------------------
    need to install npm module in root directory.
        >node -v v12.18.2
        >npm -v (npm should be >5v) 6.14.5
        >npm init
        this cmd will will create single configuration file name 'package.json' that will manage all the dependencies
            package name: (notes-app)
            version: (1.0.0)
            description: Created by imam
            entry point: (app.js)
            test command: imam
            git repository:
            keywords:
            author: imam
            license: (ISC)
        accept the default, or else you can even provide your values.
        after that it will create package.json{in angular while creating project itself it will be generated by angular only}
            {
                "name": "notes-app",
                "version": "1.0.0",
                "description": "Created by imam",
                "main": "app.js",
                "scripts": {
                    "test": "imam"
                },
                "author": "imam",
                "license": "ISC"
            }
        *note:- for json we always need to use double quotes" instead of single quotes'.

        >npm i validator {npm uninstall validator} to uninstall
        1.then it will add inside dependencies : {} in package.json
            "dependencies": {
                "validator": "^13.5.2"
            }
        no edit
        2.generated node_modules folder and download all the code from npm server.

        no edit -> maintained by npm.
        3.package-lock.json ->it contains extra information making npm a bit faster and a bit secure.
        it will list all our dependencies as well as where they were fetched from.
        it also has hash to make sure we are getting extra code that we got previously if we were to install a dependency again.

        No ES6
        var validator = require('validator');

        validator.isEmail('foo@bar.com'); //=> true

        ES6
        import validator from 'validator';
        Or, import only a subset of the library:

        import isEmail from 'validator/lib/isEmail';

        const validator = require('validator');
        console.log(validator.isEmail('imam@gmail.com'))
        console.log(validator.isURL('http://www.google.co'));

    printing colors
    ---------------
    we can recreate npm_modules directory from scratch based on the content of package.json and package-lock.json
    >npm install

    chalk npm hands on
        const chalk = require('chalk');
    console.log(chalk.bold.bgWhite.green.underline.dim.italic.inverse.strikethrough.dim.hidden('Success!'));

    Global npm modules and nodemon
    ------------------------------
    till now whatever npm package we have install are locally installed i.e only inside project folder in node_module folder.

    installing -g(--global) globally will not add the dependencies into package.json/package-lock.json
    install nodemon
        npm install nodemon -g
    *avoid installing packages -g mode.
    *try to use cmg instead power shell(since power have restricted access env variables)

    handy npm package
    >nodemon app.js
        auto compiling whenever something changed, we dont have to restart constantly whenever swe made changes.
    terminate ctrl+c

File System and Command Line Args (Notes App)
*********************************************
    Getting Input from Users
    ------------------------
    process.argv->return array with
        1st path to node js exe on your machine
        2nd path of the file where it reside in system.
        3rd value which we have provided
    Argument Parsing with Yargs: Part I
    ---------------------------------
    Since node does not provide argument parsing.
        >node app.js add --title"This is the title"
        console.log(process.argv)
        [
            '..\\node.exe',
            '..\\file location',
            'add',
            'title="This is the title'
        ]
    To parse in useful way, since most of the node js application use command line arguments in some way. There are tons of npm packages out there to parse the agrv in useful manner, Yargs is one of them.
    >npm install yargs
        console.log(yargs.argv);
    >node app.js add --title="This is title"
        yargs ll provide more organized useful key values pairs
        { 
            _: [ 'add' ],
            '$0': 'app.js'
            title: 'This is title'       
        }

    yargs.command({
        command: 'some sommand',
        description: 'desc about it',
        handler: handle function
    })

    >node app.js -help->then it will suggest you with all the commands.
        Commands:
        app.js add     Add a new note
        app.js remove  Remove a node
        app.js list    Listing note
        app.js read    Read note

        Options:
        --help     Show help                                                 [boolean]       
        --version  Show version number
        builder->help us to create property which can be used inside handler.
        demandOption: true->will make the argument compulsory
        type: 'string'->make sure the content which you need has provided
    
    18. Storing Data with JSON
    --------------------------
        const book = {
            title: 'Ego is the Enemy',
            author: 'Ryan Holiday'
        }

        //since fs node core module only know to work with string data we need to convert js JSON object to string object using stringify
        const bookStringify = JSON.stringify(book);
        console.log(book);
        console.log(bookStringify);
        //we cant be able to access the data using properties in string data
        console.log(bookStringify.author);

        //conversely we can convert string object to  js JSON object using JSON.parse()
        const bookJSON = JSON.parse(bookStringify);
        //we can access data using property
        console.log(bookJSON.author)

        { title: 'Ego is the Enemy', author: 'Ryan Holiday' }
        {"title":"Ego is the Enemy","author":"Ryan Holiday"}
        undefined
        Ryan Holiday

        observation -> all key resides inside quotes, all the single quotes converted into double quotes.

        //js object
        const book = {
            title: 'Ego is the Enemy',
            author: 'Ryan Holiday'
        }

        creating JSON sting object
        const bookJSON = JSON.stringify(book);
        fs.writeFileSync('1-json.json', bookJSON);
    
    data buffer because we wont get data as we see them instead we are gng get buffer data
    <Buffer 7b 22 74 69 74 6c 65 22 3a 22 45 67 6f 20 69 73 20 74 68 65 20 45 6e 65 6d 79 22 2c 22 61 75 74 68 6f 72 22 3a 22 52 79 61 6e 20 48 6f 6c 69 64 61 79 ... 2 more bytes>
    
    to get string back we need to use toSting()
    const dataBuffer = fs.readFileSync('1-json.json');
    console.log(dataBuffer);
    console.log(dataBuffer.toString());
    o/p >node 1-json.json
        <Buffer 7b 22 74 69 74 6c 65 22 3a 22 45 67 6f 20 69 73 20 74 68 65 20 45 6e 65 6d 79 22 2c 22 61 75 74 68 6f 72 22 3a 22 52 79 61 6e 20 48 6f 6c 69 64 61 79 ... 2 more bytes>
        {"title":"Ego is the Enemy","author":"Ryan Holiday"}
    
    Note: we cant be able to access the properties in JSON string object, we need to convert it to JS object by parsing and then need to access.

    Read JSON file data and update back to same file
    ------------------------------------------------
    const fs= require('fs');
    const dataBuffer = fs.readFileSync('1-json.json');
    //convert buffer into JSON string
    const dataJSON = dataBuffer.toString();
    console.log('Old data' +dataJSON);

    //convert JSON string to JS object to override and alter property names. 
    const user = JSON.parse(dataJSON);
    user.name = 'imamChanged';
    user.age = 25;

    //override the original data back to file.
    const userJSON = JSON.stringify(user);
    fs.writeFileSync('1-json.json', userJSON);
    console.log('New data' +userJSON);
        >node 1-json.js
        Old data{"name":"imam","planet":"earth","age":24}
        New data{"name":"imamChanged","planet":"earth","age":25}

    *note: JSON is just a string representation of Javascript Object.

    19. Adding a Note
    -----------------
    how to export multiple modules - module.exports ={}
        module.exports = {
            getNotes: getNotes,
            addNotes: addNotes
        }
    import as utility
        const notesUtility = require('./notes');

    20. Removing a Notes
    21. ES6 Aside: Arrow Functions
        // const square = function(x) {
        //     return x*x;
        // }
        // const square = (x)=>{
        //     return x*x;
        // }
        // const square = x=> x*x;
        // console.log(square(2));

        const event = {
            name: 'Birth Party',
            guestList: ['imam', 'imam1', 'imam2'],
            // printGuestList: function() {
            //     console.log('Guest list for '+ this.name);
            // }
            
            // printGuestList: ()=> {
            //     console.log('Guest list for '+ this.name);
            // }
            
            //ES6 method definition syntax
            printGuestList() {
                console.log('Guest list for '+ this.name);
                //standard function have there own this
                // this.guestList.forEach(function(guest) {
                //     console.log(guest+' is attending '+ this.name)
                // })
                //arrow functions don't bind the value this, they will bind to parent this
                this.guestList.forEach((guest)=> {
                    console.log(guest+' is attending '+ this.name)
                })
            }
        }
        event.printGuestList();
    Note: arrow functions are bad for methods, so use ES6 shorthand syntax
    
    22. Refactoring to Use Arrow Functions
        method->defining a function directly on an object, use ES6 shorthand syntax i.e remove ':function'
    if the function is not dependent on any object ro designed to work on any specific objects->go for arrow functions

    23. Listing Notes
    24. Reading a Note
        implement functionality notes.js
        export.modules
        call from app.js
    dif between filter() and find()
    if there are 1000 elements in a array, if the match(duplicate) found at 90th elements
        filter()->will not stop there it will iterate other elements too
    But
        find()->exit as soon as it first match found.

Debugging Node.js (Notes Apps)
******************************
    1.console.log()->only good to for one or two objects visualization
    2.node debugger->node built in debugging tools integrated with chrome.
    just put 'debugger'-to pause the execution->and then analyse in dev tools
    to make it work we need to add 'inspect' before remaining command.
        >node --inspect app.js add --title="t" --body="b"
        got error?
        >node --inspect-brk app.js add --title="a" --body="b"
        try adding different port -> --port=9230
    after this go to chrome->chrome://inspect/
        chrome uses built in V8 debugger tool

Section 6: Asynchronous Node.js(Weather App)
********************************************
    Call Stack, Callback Queue, and Event Loop
    ------------------------------------------
    Event loop needs to be wait until all the functions inside execute context executed i.e till its gets empty
    End of main program finished, once its popped up the evnt loops execution start{ but in other languages such as java end if main is end of execution} thats not in case of asynchronous languages!
    Another words non of the asynchronous task run before the termination of main function.

    Making HTTP Requests
    --------------------
    www.darksky.net->may be in future it will acquired by apple.
    www.weatherstack.com - its free{1000 request per month}
    request to that api using access_key&key=value
        http://api.weatherstack.com/current?access_key=500202960a4016659e6ac115053018b4&query=37.8267,-122.4233

    initialize npm
    >npm init -y{yes to all to provide default values}
    install postman-request
    >npm i postman-request

    32. Customizing HTTP Requests
    -----------------------------
    go to postman-request npm package->click-option all available option
    provide json as 2nd option
        {
            url: url,
            json: true            
        }
    now response.body is already an JSON parsed object so no need to use JSON.parsed.
        console.log(response.body.current);

    To view an raw json as a formatted JSON in browser->mak use of 'JSON formatter' chrome extension->after installation just refresh it
    another alternatives
       office work-> postman, download json extension for notepad++.
    console.log(response.body.current.weather_descriptions[0]+'. It is currently '+ response.body.current.temperature+' degrees out. It is feels like '+response.body.current.feelslike+' degrees out.');

    to view temperature in fahrenheit->document->units->add another k:v pai to url->&units=f


    33. An HTTP Request Challenge - mapbox.com->create account
    -----------------------------
    Geocoding api->docs->search->geo coding api->goe coding
    use forward geo coding
    call request
    provide query url and json
    do error handling

    Call back functions, abstraction, chaining
    ------------------------------------------
    Implemented geo code and forecast using call back functions also chained both with error handing.
    if(error) {
        return...//it will terminate the execution. So instead of suing else statement use return
    }

    ES6 Aside: Object Property Shorthand and Destructuring
    ------------------------------------------------------
    //Object property shorthand
        const name = 'imam';
        const age = 24;

        const user = {
            // name: name,
            name,
            // age: age,
            age,
            location: 'Bangalore'
        }

        console.log(user);

    //object destructuring - To extract object values into individual properties
        const product = {
            label: 'notebook',
            price: 10,
            stock: 2,
            salePrice: undefined
        }
    //End of writing a lot of code
    const label = product.label;
    const label = product.price;

    //To over come this, when we have complex objects with lot of properties use destructuring to store prop value in a individual variable.
    const {label:newLabel, price, newProp = 'default value'} = product;
    console.log(newLabel, price, newProp);

    //destructuring inside call back function
        const transaction = (type, {label, stock})=> {
            console.log(type, label, stock);
        }

        transaction('Order', product);

    HTTP Requests Without a Library
    -------------------------------
    To to raw requests using http without using node dependencies such 'postman-request'
    import 'http' modules

    >we need to store and end the http request objects, other wise we wont get any response instead the porgram gets hanged
        const http = require('http');
        const url = 'http://api.weatherstack.com/current?access_key=500202960a4016659e6ac115053018b4&query=45, -75&units=f';

        const request = http.request(url, (response)=> {
            let data = '';
            response.on('data', (chunk)=> {//data is a event of http which gives back a response
                data = data + chunk.toString();
                //console.log(chunk);
            });

            response.on('end', ()=> {// end event listening
                // console.log(data);
                const body = JSON.parse(data);
                console.log(body);
            })

            request.on('error', (error)=> {// error event listening
                console.log('An error '+error);
            })
        })

        request.end();

        note: in read world we supposed to use npm core module(axios, postman-request etc) only, since they will make request process much easier.
        here in http the call back only files single time when things are ready we either have an error or response.
        on other hand core modules will provide those low level implementation and node comes with bundled with npm. we always use npm modules when we are building oue application.

Web Servers using Express
*************************
    So for applications which we have created have only been accessible via command line, its not realistic.
    It would be much better if a user could simple type a URL in the browser to pull up and interact with out applications.

    Express
    -------
    This is popular npm library, which makes it really easy to create web servers.
    >we can serve HTML, CSS, JS, also json data.

    official docs-> expressjs.com
    ->initialize npm
    >npm init -y
    ->install express library
    >npm i express --save

    The --save option instructed NPM to include the package inside of the dependencies section of your package.
    
    npm install saves any specified packages into dependencies by default. Additionally, you can control where and how they get saved with some additional flags:

    -P, --save-prod: Package will appear in your dependencies. This is the default unless -D or -O are present.

    -D, --save-dev: Package will appear in your devDependencies.

    -O, --save-optional: Package will appear in your optionalDependencies.

    --no-save: Prevents saving to dependencies.

    ->create src folder->create app.js file
    ->create application
        const express = require('express');

        //create server
        const app = express();

        //this method will configure what should app do when an someone tries tp request at a specific url, mey be we should sending back html or json.
        //1st arg-> route parameter, 2nd->call back fun(req, res)
        app.get('', (req, res)=> {
            res.send('Home express!');
        })

        //to start server up app.listen(specify port, callback()), 3000 common development port
        app.listen(3000, ()=>{
            console.log('server is up and running on port 3000');
        })

        //visit localhost:3000 to view the message.
    if you do any change, again restart your server to apply the changes you have made.
    or else you can use 'nodemon' to auto sun serve whenever changes are saved.

    add /help route
        app.listen(3000, ()=>{
            console.log('server is up and running on port 3000');
        })

    Serving up HTML and JSON
    ------------------------
    Send html
        app.get('', (req, res)=> {
            res.send('<h1>Weather</h1>');
        })

    send JSON
        app.get('/help', (req, res)=>{
            res.send({
                name: 'imam',
                age: 24
            });
        })
    Serving up Static Assets
    ------------------------
        like long html  files we need to write it inside separate
        >create 'public' named folder.
            To make express to point a public folder
                //To provide location of current working directory/folder name
        console.log(__dirname);
        //To provide location of current working filename name
        console.log(__filename);
        //create server

    explore 'path' core module from node docs.
        we are using path.join() ->https://nodejs.org/dist/latest-v14.x/docs/api/path.html#path_path_join_paths

        //manipulate and produce required path using path
        console.log(path.join(__dirname, '../public'))
        publicDirectoryPath = path.join(__dirname, '../public')
        //app.use()->the way to customize server
        //static() take the path we want to serve
        app.use(express.static(publicDirectoryPath))

    Serving up CSS, JS, Images, and More
    ------------------------------------
    relative path
        <!-- <link rel="stylesheet" href="./CSS/styles.css"> -->
    absolute path, starts with /(which wil bring you to the root of the hard drives/web server root)
        <link rel="stylesheet" href="/css/styles.css">

    Dynamic Pages with Templating
    -----------------------------
    Till now we have served only static web content, but we will serve dynamic web content.
    template engine - handle bars
        To load(use/reuse markup in our app) dynamic web content using web server
    To achieve this we need 2 npm modules.
    1.npm handlebars
    2.npm hbs->integrated inside express.
        >npm i hbs
    to tell express which template engine we have installed
        app.set('view engine', 'hbs');
            'view engine' should match exactly.
    specific folder 'views' in rot of project/web server.

    create a file with .hbs extension->similar to html, copy content of index.html tp index.hbs and delete static index.tml

    1.set view engine
        //to tell express which template engine we have installed
        app.set('view engine', 'hbs')

    2.specify view folder directory
        // being rendered res.render()
        app.set('views', path.join(__dirname, '../views'));

    3.render and send the response using res.render()
    >res.render()->goes to views folder render .hbs convert it into .html.
        app.get('',(req, res) => {
            res.render('index')
        })
        here provide file without .hbs extension inside quotes.

    //second argument to render() is a object with values which you want to render in template
        //index page setup
        app.get('',(req, res) => {
            res.render('index', {
                title: 'Weather App',
                name: 'Imam Hulagur'
            })
        })

    //rendering in hsb template
    it similar to string interpolation {{prop_name}} in Angular
        <h1>{{title}}</h1>
        <p>Create by: {{name}}</p>

    lly setup about and help page

    Customizing the Views Directory
    ------------------------------
        //setup custom [ath for views folder
            const viewPath  = path.join(__dirname, '../templates')
        // to tell express where to look for views folder which we have renamed
            app.set('views', viewPath)
    
    Advanced Templating(partials with handlebars)
    ---------------------------------------------
    allows us to create a little template which is a part of bigger web page.
    like if you want to create separate template for shared template like headers, footers and nav etc.
    partials also files have extensions like hbs
        ->load hbs to configure partials
    import hbs
        const  hbs = require('hbs')
    create a separate folders for both views and partials inside templates folder.

        //setup custom path for partials
            const partialsPath = path.join(__dirname, '../templates/partials')
        //register partials using hbs
            hbs.registerPartials(partialsPath)

        create header.hbs inside partials

        to make use of that template inside other templates {{>partial name}}
             <h1>{{>header}}</h1>

        *note: only provide file partials file name(without path or .hbs extension)

    Note: even though we haves saves we dont have error in console the server is up and running, still we get error if visit our page
        its because the 'nodemon' only monitors the changes happened to .html, .js but not .hbs so we need to tweak the nodemon configuration
        we need to specify using -e(extensions) with comma separated values(no space after the comma)
    nodemon src/app.js -e js,hbs


    404 pages
    ---------
    set up new route handler with wildcard character like we do it in angular '**'
        app.get('*', (req, res)=>{
            res.send('My 404 page');
        })
    In general we need to put this last, since wildcard is like except mentioned routes before if any thing is entered everything is match for wildcard so.

        app.get('/help/*',(req, res)=>{
            // res.send('Help article not found')
            res.render('404',{
                title: '404',
                name: 'imam hulagur',
                errorMessage: 'Help article not found'
            })
        })

        app.get('*', (req, res)=>{
            // res.send('My 404 page');
            res.render('404',{
                title: '404',
                name: 'imam hulagur',
                errorMessage: 'Page not found'
            })
        })

    Styling application
    --------------------
    /* to make use of 100% of our browsers height */
    min-height: 10vh;

    /* flex-grow->this allows en element to grow and take as much as space  */
    /* 1-> to take all the left over space */
    flex-grow: 1;

    To show Images
    <link rel="icon" href="/img/weather.png">