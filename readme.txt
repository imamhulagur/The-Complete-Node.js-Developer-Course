code repository for this tutorials
https://links.mead.io/nodecourse
https://github.com/andrewjmead/node-course-v3-code

The complete node JS free youtube tutorial by maximilian
https://academind.com/tutorials/building-a-restful-api-with-nodejs/


why Node JS
-----------
V8 JS engine
    it is build on top of chrome browser using c++
    JS front ->gets converted into C++ binding
    Node JS-> gets converted into some c++ binding function

    In browser developer console is provided to execute individual JS script or code.
    I can get window object in JS browser.
    window is specially provided by the chrome V8 for JS at Runtime. which will provide access to various properties and methods.
    in browser we have 'document' object which allow us to work with DOM


    all the js core function are provided in Node also, its because of V8 engine.
    But if try to access it in node terminal we will get undefined error.
    node terminal->RDBL->Read Eval and Print
    lly in Node we have 'global' object to give access to various methods and properties.
    here we have 'process'->have various properties and methods to manipulate the process.

    Node JS is a JS on server this is possible because Node JS uses V8 engine to run over the JS code you provide.
    Node JS is able to teach new thing to JS by providing C++ binding to V8 this allow JS to understand C++ and to do the required task.

Install Node JS
----------------
    node.org
    cltr+l for node console clear or console.clear()
    cmd->node -v
    download IDE visual studio code editor.
    atom(free), sublime(paid)

Why Node js
-----------
    Node JS is a JS runtime built on Chrome's V8 JS engine.
    It uses an event-driven, non blocking I/O[reading file, db data reading] model that makes it light weight and efficient.
    Its a package eco system like npm(wwww.npmjs.com) which is largest open system package.

First program
-------------
    create hello.js
    console.log('Welcome to NOde JS');
    run->node hello/js
    documentation->nodejs.org>docs>12

Node JS module system
*********************
    3 ways of loading node module systems
    core node modules->module which are included with our node installations.
    third party modules->importing modules developes by other developers.
    own modules->module created by ourselves.

    importing core node modules
    ---------------------------
    using 'require'
        const fs = require('fs');
            fs.writeFileSync('notes.txt', 'This file was created by Node.js');
        fs.appendFileSync('notes.txt', '. This is appended by imam.');
    run>node app.js

    importing our own files
    -----------------------
    create new file utils.js
        console.log('utils.js');
    require it in app.js
        require('./utils.js');
        const name="imam";
        console.log(name);
    >node app.js
        o/p imam utils.js

    all the module which we are refering have there own scope with there own variables. we cant acce the variable of other scope just require(import) it. So we need to export explicitly that module to share with outside world.
        module.exports
    utils.js
        console.log('utils.js');
        const name='imam';
        module.exports = name;
    app.js
        const name = require('./utils.js');
        console.log(name);
    
    importing npm modules
    ---------------------
    need to install npm module in root directory.
        >node -v v12.18.2
        >npm -v (npm should be >5v) 6.14.5
        >npm init
        this cmd will will create single configuration file name 'package.json' that will manage all the dependencies
            package name: (notes-app)
            version: (1.0.0)
            description: Created by imam
            entry point: (app.js)
            test command: imam
            git repository:
            keywords:
            author: imam
            license: (ISC)
        accept the default, or else you can even provide your values.
        after that it will create package.json{in angular while creating project itself it will be generated by angular only}
            {
                "name": "notes-app",
                "version": "1.0.0",
                "description": "Created by imam",
                "main": "app.js",
                "scripts": {
                    "test": "imam"
                },
                "author": "imam",
                "license": "ISC"
            }
        *note:- for json we always need to use double quotes" instead of single quotes'.

        >npm i validator {npm uninstall validator} to uninstall
        1.then it will add inside dependencies : {} in package.json
            "dependencies": {
                "validator": "^13.5.2"
            }
        no edit
        2.generated node_modules folder and download all the code from npm server.

        no edit -> maintained by npm.
        3.package-lock.json ->it contains extra information making npm a bit faster and a bit secure.
        it will list all our dependencies as well as where they were fetched from.
        it also has hash to make sure we are getting extra code that we got previously if we were to install a dependency again.

        No ES6
        var validator = require('validator');

        validator.isEmail('foo@bar.com'); //=> true

        ES6
        import validator from 'validator';
        Or, import only a subset of the library:

        import isEmail from 'validator/lib/isEmail';

        const validator = require('validator');
        console.log(validator.isEmail('imam@gmail.com'))
        console.log(validator.isURL('http://www.google.co'));

    printing colors
    ---------------
    we can recreate npm_modules directory from scratch based on the content of package.json and package-lock.json
    >npm install

    chalk npm hands on
        const chalk = require('chalk');
    console.log(chalk.bold.bgWhite.green.underline.dim.italic.inverse.strikethrough.dim.hidden('Success!'));

    Global npm modules and nodemon
    ------------------------------
    till now whatever npm package we have install are locally installed i.e only inside project folder in node_module folder.

    installing -g(--global) globally will not add the dependencies into package.json/package-lock.json
    install nodemon
        npm install nodemon -g
    *avoid installing packages -g mode.
    *try to use cmg instead power shell(since power have restricted access env variables)

    handy npm package
    >nodemon app.js
        auto compiling whenever something changed, we dont have to restart constantly whenever swe made changes.
    terminate ctrl+c